{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Model","url","gltf","useGLTF","object","scene","dispose","state","sections","pages","zoom","top","createRef","offsetContext","createContext","Section","children","offset","factor","props","useThree","size","viewport","useContext","viewportWidth","width","viewportHeight","height","canvasWidth","canvasHeight","mobile","margin","contentMaxWidth","sectionHeight","aspect","useSection","parentOffset","ref","useRef","undefined","useFrame","curY","current","position","y","curTop","lerp","Provider","value","Lights","intensity","castShadow","HTMLContent","domContent","bgColor","modelPath","rotation","useInView","threshold","refItem","inView","useEffect","document","body","style","background","Html","fullscreen","portal","className","Loader","useProgress","active","progress","useTransition","from","opacity","leave","update","transition","div","App","useState","scrollArea","onScroll","e","target","scrollTop","concurrent","colorManagement","camera","fov","fallback","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.4842ec34.chunk.js","sourcesContent":["import React, {\n  useRef,\n  useEffect,\n  useState,\n  Suspense,\n  createRef,\n  useContext,\n  createContext,\n} from \"react\";\nimport \"./App.scss\";\n\n//\nimport { Canvas, useFrame, useThree } from \"@react-three/fiber\";\nimport { Html, useProgress, useGLTF } from \"@react-three/drei\";\nimport lerp from \"lerp\";\n// React Spring\nimport { a, useTransition } from \"@react-spring/web\";\n//Intersection Observer\nimport { useInView } from \"react-intersection-observer\";\n\nfunction Model({ url }) {\n  const gltf = useGLTF(url, true);\n  return <primitive object={gltf.scene} dispose={null} />;\n}\n\n// states\nconst state = {\n  sections: 3,\n  pages: 3,\n  zoom: 1,\n  top: createRef(),\n};\n\n//section\n\nconst offsetContext = createContext(0);\n\nfunction Section({ children, offset, factor, ...props }) {\n  const { offset: parentOffset, sectionHeight, aspect } = useSection();\n  const ref = useRef();\n  offset = offset !== undefined ? offset : parentOffset;\n  useFrame(() => {\n    const curY = ref.current.position.y;\n    const curTop = state.top.current / aspect;\n    ref.current.position.y = lerp(curY, (curTop / state.zoom) * factor, 0.1);\n  });\n  return (\n    <offsetContext.Provider value={offset}>\n      <group {...props} position={[0, -sectionHeight * offset * factor, 0]}>\n        <group ref={ref}>{children}</group>\n      </group>\n    </offsetContext.Provider>\n  );\n}\n\nfunction useSection() {\n  const { sections, pages, zoom } = state;\n  const { size, viewport } = useThree();\n  const offset = useContext(offsetContext);\n  const viewportWidth = viewport.width;\n  const viewportHeight = viewport.height;\n  const canvasWidth = viewportWidth / zoom;\n  const canvasHeight = viewportHeight / zoom;\n  const mobile = size.width < 700;\n  const margin = canvasWidth * (mobile ? 0.2 : 0.1);\n  const contentMaxWidth = canvasWidth * (mobile ? 0.8 : 0.6);\n  const sectionHeight = canvasHeight * ((pages - 1) / (sections - 1));\n  const aspect = size.height / viewportHeight;\n  return {\n    aspect,\n    viewport,\n    offset,\n    viewportWidth,\n    viewportHeight,\n    canvasWidth,\n    canvasHeight,\n    mobile,\n    margin,\n    contentMaxWidth,\n    sectionHeight,\n  };\n}\nconst Lights = () => {\n  return (\n    <>\n      {/* Ambient Light illuminates lights for all objects */}\n      <ambientLight intensity={0.3} />\n      {/* Diretion light */}\n      <directionalLight position={[10, 10, 5]} intensity={1} />\n      <directionalLight\n        castShadow\n        position={[0, 10, 0]}\n        intensity={1.5}\n        shadow-mapSize-width={1024}\n        shadow-mapSize-height={1024}\n        shadow-camera-far={50}\n        shadow-camera-left={-10}\n        shadow-camera-right={10}\n        shadow-camera-top={10}\n        shadow-camera-bottom={-10}\n      />\n      {/* Spotlight Large overhead light */}\n      <spotLight intensity={1} position={[1000, 0, 0]} castShadow />\n    </>\n  );\n};\n\nconst HTMLContent = ({\n  domContent,\n  children,\n  bgColor,\n  modelPath,\n  position,\n}) => {\n  const ref = useRef();\n  useFrame(() => (ref.current.rotation.y += 0.01));\n  const [refItem, inView] = useInView({\n    threshold: 0,\n  });\n  useEffect(() => {\n    inView && (document.body.style.background = bgColor);\n  }, [inView]);\n  return (\n    <Section factor={1.5} offset={1}>\n      <group position={[0, position, 0]}>\n        <mesh ref={ref} position={[0, -35, 0]}>\n          <Model url={modelPath} />\n        </mesh>\n        <Html fullscreen portal={domContent}>\n          <div ref={refItem} className=\"container\">\n            <h1 className=\"title\">{children}</h1>\n          </div>\n        </Html>\n      </group>\n    </Section>\n  );\n};\n\nfunction Loader() {\n  const { active, progress } = useProgress();\n  const transition = useTransition(active, {\n    from: { opacity: 1, progress: 0 },\n    leave: { opacity: 0 },\n    update: { progress },\n  });\n  return transition(\n    ({ progress, opacity }, active) =>\n      active && (\n        <a.div className=\"loading\" style={{ opacity }}>\n          <div className=\"loading-bar-container\">\n            <a.div className=\"loading-bar\" style={{ width: progress }}></a.div>\n          </div>\n        </a.div>\n      )\n  );\n}\n\nexport default function App() {\n  const [events, setEvents] = useState();\n  const domContent = useRef();\n  const scrollArea = useRef();\n  const onScroll = (e) => (state.top.current = e.target.scrollTop);\n  useEffect(() => void onScroll({ target: scrollArea.current }), []);\n\n  return (\n    <>\n      <Canvas\n        concurrent\n        colorManagement\n        camera={{ position: [0, 0, 120], fov: 70 }}\n      >\n        {/* Lights Component */}\n        <Lights />\n        <Suspense fallback={null}>\n          <HTMLContent\n            domContent={domContent}\n            bgColor=\"#f15946\"\n            modelPath=\"/armchairYellow.gltf\"\n            position={250}\n          >\n            <span>Basiquinha...</span>\n          </HTMLContent>\n          <HTMLContent\n            domContent={domContent}\n            bgColor=\"#571ec1\"\n            modelPath=\"/armchairGreen.gltf\"\n            position={0}\n          >\n            <span>Moda casual de luxo</span>\n          </HTMLContent>\n          <HTMLContent\n            domContent={domContent}\n            bgColor=\"#323232\"\n            modelPath=\"/armchairGray.gltf\"\n            position={-250}\n          >\n            <span>Trevosa ...🦇</span>\n          </HTMLContent>\n        </Suspense>\n      </Canvas>\n      <Loader />\n      <div className=\"scrollArea\" ref={scrollArea} onScroll={onScroll}>\n        <div style={{ position: \"sticky\", top: 0 }} ref={domContent} />\n        <div style={{ height: `${state.pages * 100}vh` }} />\n      </div>\n    </>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}